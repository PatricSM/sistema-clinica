-- ===============================================
-- SISTEMA CLÍNICA - BANCO DE DADOS COMPLETO
-- ===============================================
-- Versão: 2.0 - Atualizado em 02/07/2025
-- Descrição: Schema completo com correções de segurança e performance
-- Supabase Project: clinica-system (swnwsxfqndhcezshrivv)
-- Autenticação: Sistema personalizado com JWT
-- ===============================================

-- ===============================================
-- 1. CONFIGURAÇÕES INICIAIS
-- ===============================================

-- Garantir que estamos no schema público
SET search_path TO public;

-- Configurar timezone
SET timezone = 'America/Sao_Paulo';

-- ===============================================
-- 2. TIPOS ENUMERADOS (ENUMS)
-- ===============================================

-- Tipos de usuário
CREATE TYPE user_role AS ENUM ('admin', 'professional', 'secretary', 'patient');

-- Status de agendamentos
CREATE TYPE appointment_status AS ENUM ('scheduled', 'confirmed', 'cancelled', 'completed', 'no_show');

-- Métodos de pagamento
CREATE TYPE payment_method AS ENUM ('cash', 'credit_card', 'debit_card', 'pix', 'bank_transfer', 'boleto');

-- Tipos de transação financeira
CREATE TYPE transaction_type AS ENUM ('receipt', 'invoice', 'payment');

-- Tipos de documento
CREATE TYPE document_type AS ENUM ('consent_form', 'report', 'attestation', 'receipt', 'contract', 'medical_record_summary', 'other');

-- Tipos de tarefa para pacientes
CREATE TYPE task_type AS ENUM ('task', 'message', 'scale', 'questionnaire');

-- ===============================================
-- 3. TABELAS PRINCIPAIS
-- ===============================================

-- Tabela de usuários (sem RLS para permitir autenticação personalizada)
CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    address TEXT,
    role user_role NOT NULL,
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    avatar_url VARCHAR(255),
    last_login TIMESTAMP,
    email_verified BOOLEAN DEFAULT FALSE NOT NULL,
    email_verified_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de pacientes
CREATE TABLE IF NOT EXISTS patients (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    date_of_birth DATE,
    gender VARCHAR(20),
    cpf VARCHAR(14) UNIQUE,
    rg VARCHAR(20),
    emergency_contact_name VARCHAR(255),
    emergency_contact_phone VARCHAR(20),
    responsible_id INTEGER REFERENCES patients(id),
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de profissionais
CREATE TABLE IF NOT EXISTS professionals (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    crp_number VARCHAR(50) UNIQUE NOT NULL,
    specialty VARCHAR(100),
    curriculum TEXT,
    description TEXT,
    consultation_price DECIMAL(10,2),
    working_hours JSONB,
    is_available BOOLEAN DEFAULT TRUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de secretárias
CREATE TABLE IF NOT EXISTS secretaries (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    department VARCHAR(100),
    permissions JSONB,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de agendamentos
CREATE TABLE IF NOT EXISTS appointments (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER NOT NULL REFERENCES professionals(id) ON DELETE CASCADE,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    status appointment_status DEFAULT 'scheduled' NOT NULL,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de prontuários médicos
CREATE TABLE IF NOT EXISTS medical_records (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER NOT NULL REFERENCES professionals(id) ON DELETE CASCADE,
    record_date TIMESTAMP DEFAULT NOW() NOT NULL,
    session_notes TEXT,
    observations TEXT,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de diagnósticos
CREATE TABLE IF NOT EXISTS diagnoses (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code VARCHAR(20) UNIQUE NOT NULL,
    description VARCHAR(500) NOT NULL,
    type VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de relacionamento prontuário-diagnóstico (N:N)
CREATE TABLE IF NOT EXISTS medical_record_diagnoses (
    medical_record_id INTEGER NOT NULL REFERENCES medical_records(id) ON DELETE CASCADE,
    diagnosis_id INTEGER NOT NULL REFERENCES diagnoses(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
    PRIMARY KEY (medical_record_id, diagnosis_id)
);

-- Tabela de documentos
CREATE TABLE IF NOT EXISTS documents (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER REFERENCES professionals(id) ON DELETE CASCADE,
    document_type document_type NOT NULL,
    title VARCHAR(255) NOT NULL,
    file_url VARCHAR(500),
    signed_by_patient BOOLEAN DEFAULT FALSE NOT NULL,
    signed_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de templates de documentos
CREATE TABLE IF NOT EXISTS document_templates (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    document_type document_type NOT NULL,
    content TEXT,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de transações financeiras
CREATE TABLE IF NOT EXISTS financial_transactions (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER REFERENCES professionals(id) ON DELETE SET NULL,
    amount DECIMAL(10,2) NOT NULL,
    transaction_date TIMESTAMP DEFAULT NOW() NOT NULL,
    payment_method payment_method NOT NULL,
    transaction_type transaction_type NOT NULL,
    status VARCHAR(20) DEFAULT 'paid' NOT NULL,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de templates de questionários
CREATE TABLE IF NOT EXISTS questionnaire_templates (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    questions_json JSONB,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de questionários respondidos pelos pacientes
CREATE TABLE IF NOT EXISTS patient_questionnaires (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    questionnaire_template_id INTEGER NOT NULL REFERENCES questionnaire_templates(id) ON DELETE CASCADE,
    completion_date TIMESTAMP DEFAULT NOW() NOT NULL,
    answers_json JSONB,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de tarefas dos pacientes
CREATE TABLE IF NOT EXISTS patient_tasks (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER NOT NULL REFERENCES professionals(id) ON DELETE CASCADE,
    task_type task_type NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    due_date TIMESTAMP,
    is_completed BOOLEAN DEFAULT FALSE NOT NULL,
    completed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de medicamentos dos pacientes
CREATE TABLE IF NOT EXISTS patient_medications (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER NOT NULL REFERENCES professionals(id) ON DELETE CASCADE,
    medication_name VARCHAR(255) NOT NULL,
    dosage VARCHAR(100),
    frequency VARCHAR(100),
    start_date DATE,
    end_date DATE,
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de diário de humor dos pacientes
CREATE TABLE IF NOT EXISTS patient_mood_diary (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    diary_date DATE NOT NULL,
    mood_rating INTEGER CHECK (mood_rating >= 1 AND mood_rating <= 10),
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de configurações da clínica
CREATE TABLE IF NOT EXISTS clinic_settings (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de logs do sistema
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    action VARCHAR(100) NOT NULL,
    table_name VARCHAR(50),
    record_id INTEGER,
    old_values JSONB,
    new_values JSONB,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Tabela de sessões terapêuticas
CREATE TABLE IF NOT EXISTS sessions (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    professional_id INTEGER NOT NULL REFERENCES professionals(id) ON DELETE CASCADE,
    session_date TIMESTAMP DEFAULT NOW() NOT NULL,
    session_type VARCHAR(50) DEFAULT 'therapy' NOT NULL,
    duration_minutes INTEGER DEFAULT 50,
    progress_notes TEXT,
    mood_before INTEGER CHECK (mood_before >= 1 AND mood_before <= 10),
    mood_after INTEGER CHECK (mood_after >= 1 AND mood_after <= 10),
    session_goals TEXT,
    homework_assigned TEXT,
    next_session_date TIMESTAMP,
    status VARCHAR(20) DEFAULT 'completed',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Tabela de notificações por email
CREATE TABLE IF NOT EXISTS email_notifications (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,
    sender_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    recipient_email VARCHAR(255) NOT NULL,
    recipient_name VARCHAR(255) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    body TEXT,
    email_type VARCHAR(50) DEFAULT 'general',
    status VARCHAR(20) DEFAULT 'sent',
    sent_at TIMESTAMP DEFAULT NOW(),
    opened_at TIMESTAMP,
    clicked_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Tabela de notificações do sistema
CREATE TABLE IF NOT EXISTS system_notifications (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type VARCHAR(20) DEFAULT 'info',
    priority VARCHAR(20) DEFAULT 'medium',
    is_read BOOLEAN DEFAULT FALSE,
    is_dismissed BOOLEAN DEFAULT FALSE,
    action_url VARCHAR(255),
    action_label VARCHAR(100),
    expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    read_at TIMESTAMP,
    dismissed_at TIMESTAMP
);

-- ===============================================
-- 4. ÍNDICES PARA PERFORMANCE
-- ===============================================

-- Índices para foreign keys (performance)
CREATE INDEX IF NOT EXISTS idx_appointments_patient_id ON appointments(patient_id);
CREATE INDEX IF NOT EXISTS idx_appointments_professional_id ON appointments(professional_id);
CREATE INDEX IF NOT EXISTS idx_appointments_start_time ON appointments(start_time);
CREATE INDEX IF NOT EXISTS idx_appointments_status ON appointments(status);

CREATE INDEX IF NOT EXISTS idx_documents_patient_id ON documents(patient_id);
CREATE INDEX IF NOT EXISTS idx_documents_professional_id ON documents(professional_id);

CREATE INDEX IF NOT EXISTS idx_financial_transactions_patient_id ON financial_transactions(patient_id);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_professional_id ON financial_transactions(professional_id);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_created_at ON financial_transactions(created_at);

CREATE INDEX IF NOT EXISTS idx_logs_user_id ON logs(user_id);

CREATE INDEX IF NOT EXISTS idx_medical_record_diagnoses_diagnosis_id ON medical_record_diagnoses(diagnosis_id);
CREATE INDEX IF NOT EXISTS idx_medical_record_diagnoses_medical_record_id ON medical_record_diagnoses(medical_record_id);

CREATE INDEX IF NOT EXISTS idx_medical_records_patient_id ON medical_records(patient_id);
CREATE INDEX IF NOT EXISTS idx_medical_records_professional_id ON medical_records(professional_id);
CREATE INDEX IF NOT EXISTS idx_medical_records_created_at ON medical_records(created_at);

CREATE INDEX IF NOT EXISTS idx_patient_medications_patient_id ON patient_medications(patient_id);
CREATE INDEX IF NOT EXISTS idx_patient_medications_professional_id ON patient_medications(professional_id);

CREATE INDEX IF NOT EXISTS idx_patient_questionnaires_patient_id ON patient_questionnaires(patient_id);
CREATE INDEX IF NOT EXISTS idx_patient_questionnaires_questionnaire_template_id ON patient_questionnaires(questionnaire_template_id);

CREATE INDEX IF NOT EXISTS idx_patient_tasks_patient_id ON patient_tasks(patient_id);
CREATE INDEX IF NOT EXISTS idx_patient_tasks_professional_id ON patient_tasks(professional_id);

CREATE INDEX IF NOT EXISTS idx_patients_responsible_id ON patients(responsible_id);

CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);

CREATE INDEX IF NOT EXISTS idx_email_notifications_patient_id ON email_notifications(patient_id);
CREATE INDEX IF NOT EXISTS idx_email_notifications_sender_user_id ON email_notifications(sender_user_id);

CREATE INDEX IF NOT EXISTS idx_sessions_patient_id ON sessions(patient_id);
CREATE INDEX IF NOT EXISTS idx_sessions_professional_id ON sessions(professional_id);

CREATE INDEX IF NOT EXISTS idx_system_notifications_user_id ON system_notifications(user_id);

-- ===============================================
-- 5. FUNÇÕES E TRIGGERS
-- ===============================================

-- Função para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;

-- Triggers para updated_at em todas as tabelas
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patients_updated_at
  BEFORE UPDATE ON patients
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_professionals_updated_at
  BEFORE UPDATE ON professionals
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_secretaries_updated_at
  BEFORE UPDATE ON secretaries
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_appointments_updated_at
  BEFORE UPDATE ON appointments
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_medical_records_updated_at
  BEFORE UPDATE ON medical_records
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_diagnoses_updated_at
  BEFORE UPDATE ON diagnoses
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_medical_record_diagnoses_updated_at
  BEFORE UPDATE ON medical_record_diagnoses
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_documents_updated_at
  BEFORE UPDATE ON documents
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_document_templates_updated_at
  BEFORE UPDATE ON document_templates
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_financial_transactions_updated_at
  BEFORE UPDATE ON financial_transactions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_questionnaire_templates_updated_at
  BEFORE UPDATE ON questionnaire_templates
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patient_questionnaires_updated_at
  BEFORE UPDATE ON patient_questionnaires
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patient_tasks_updated_at
  BEFORE UPDATE ON patient_tasks
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patient_medications_updated_at
  BEFORE UPDATE ON patient_medications
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patient_mood_diary_updated_at
  BEFORE UPDATE ON patient_mood_diary
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_clinic_settings_updated_at
  BEFORE UPDATE ON clinic_settings
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sessions_updated_at
  BEFORE UPDATE ON sessions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_email_notifications_updated_at
  BEFORE UPDATE ON email_notifications
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Função para criar primeiro administrador
CREATE OR REPLACE FUNCTION create_first_admin(
  admin_name text,
  admin_email text,
  admin_password text,
  clinic_name text
)
RETURNS json
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
DECLARE
  new_user_id uuid;
  new_professional_id uuid;
BEGIN
  -- Generate new UUID
  new_user_id := gen_random_uuid();
  
  -- Create user record
  INSERT INTO public.users (id, name, email, role)
  VALUES (new_user_id, admin_name, admin_email, 'admin');
  
  -- Create professional record
  INSERT INTO public.professionals (user_id, name, email, specialty, crp_crm)
  VALUES (new_user_id, admin_name, admin_email, 'Administrador', 'ADMIN')
  RETURNING id INTO new_professional_id;
  
  -- Update clinic settings
  INSERT INTO public.clinic_settings (name, created_by)
  VALUES (clinic_name, new_user_id)
  ON CONFLICT (id) DO UPDATE SET name = clinic_name;
  
  RETURN json_build_object('user_id', new_user_id, 'professional_id', new_professional_id);
END;
$$;

-- Função para obter role do usuário
CREATE OR REPLACE FUNCTION get_user_role(user_id uuid)
RETURNS text
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
DECLARE
  user_role text;
BEGIN
  SELECT role INTO user_role
  FROM public.users
  WHERE id = user_id;
  
  RETURN COALESCE(user_role, 'patient');
END;
$$;

-- Função para verificar permissões
CREATE OR REPLACE FUNCTION has_permission(
  user_id uuid,
  required_permission text
)
RETURNS boolean
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
DECLARE
  user_role text;
BEGIN
  SELECT role INTO user_role
  FROM public.users
  WHERE id = user_id;
  
  -- Admin has all permissions
  IF user_role = 'admin' THEN
    RETURN true;
  END IF;
  
  -- Professional permissions
  IF user_role = 'professional' THEN
    RETURN required_permission IN ('read_patients', 'write_patients', 'read_appointments', 'write_appointments', 'read_medical_records', 'write_medical_records');
  END IF;
  
  -- Secretary permissions
  IF user_role = 'secretary' THEN
    RETURN required_permission IN ('read_patients', 'write_patients', 'read_appointments', 'write_appointments');
  END IF;
  
  -- Patient permissions
  IF user_role = 'patient' THEN
    RETURN required_permission IN ('read_own_data', 'write_own_data');
  END IF;
  
  RETURN false;
END;
$$;

-- Função auxiliar para autenticação personalizada
CREATE OR REPLACE FUNCTION current_user_id()
RETURNS integer
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
DECLARE
  user_int_id integer;
BEGIN
  -- Get user ID from users table based on auth.uid()
  SELECT id INTO user_int_id
  FROM public.users
  WHERE id = (auth.uid()::text)::integer;
  
  RETURN user_int_id;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;
$$;

-- ===============================================
-- 6. ROW LEVEL SECURITY (RLS)
-- ===============================================

-- Habilitar RLS em todas as tabelas (exceto users para autenticação personalizada)
ALTER TABLE patients ENABLE ROW LEVEL SECURITY;
ALTER TABLE professionals ENABLE ROW LEVEL SECURITY;
ALTER TABLE secretaries ENABLE ROW LEVEL SECURITY;
ALTER TABLE appointments ENABLE ROW LEVEL SECURITY;
ALTER TABLE medical_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE medical_record_diagnoses ENABLE ROW LEVEL SECURITY;
ALTER TABLE diagnoses ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE document_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE financial_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE questionnaire_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_questionnaires ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_medications ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_mood_diary ENABLE ROW LEVEL SECURITY;
ALTER TABLE clinic_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE email_notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_notifications ENABLE ROW LEVEL SECURITY;

-- Políticas RLS básicas para service role e usuários autenticados
-- Patients
CREATE POLICY "Allow full access for service role" ON patients
  FOR ALL USING (current_setting('request.jwt.claims', true)::json ->> 'role' = 'service_role');

CREATE POLICY "Allow read access for authenticated" ON patients
  FOR SELECT USING (true);

-- Professionals
CREATE POLICY "Allow full access for service role" ON professionals
  FOR ALL USING (current_setting('request.jwt.claims', true)::json ->> 'role' = 'service_role');

CREATE POLICY "Allow read access for authenticated" ON professionals
  FOR SELECT USING (true);

-- Secretaries
CREATE POLICY "Allow full access for service role" ON secretaries
  FOR ALL USING (current_setting('request.jwt.claims', true)::json ->> 'role' = 'service_role');

CREATE POLICY "Allow read access for authenticated" ON secretaries
  FOR SELECT USING (true);

-- Appointments
CREATE POLICY "Authenticated users can view appointments" ON appointments
  FOR ALL USING (auth.role() = 'authenticated');

-- Medical records
CREATE POLICY "Authenticated users can view medical records" ON medical_records
  FOR ALL USING (auth.role() = 'authenticated');

-- Medical record diagnoses
CREATE POLICY "Authenticated users can view medical record diagnoses" ON medical_record_diagnoses
  FOR ALL USING (auth.role() = 'authenticated');

-- Diagnoses
CREATE POLICY "Authenticated users can view diagnoses" ON diagnoses
  FOR ALL USING (auth.role() = 'authenticated');

-- Documents
CREATE POLICY "Authenticated users can view documents" ON documents
  FOR ALL USING (auth.role() = 'authenticated');

-- Document templates
CREATE POLICY "Authenticated users can view document templates" ON document_templates
  FOR ALL USING (auth.role() = 'authenticated');

-- Financial transactions
CREATE POLICY "Authenticated users can view financial transactions" ON financial_transactions
  FOR ALL USING (auth.role() = 'authenticated');

-- Questionnaire templates
CREATE POLICY "Authenticated users can view questionnaire templates" ON questionnaire_templates
  FOR ALL USING (auth.role() = 'authenticated');

-- Patient questionnaires
CREATE POLICY "Authenticated users can view patient questionnaires" ON patient_questionnaires
  FOR ALL USING (auth.role() = 'authenticated');

-- Patient tasks
CREATE POLICY "Authenticated users can view patient tasks" ON patient_tasks
  FOR ALL USING (auth.role() = 'authenticated');

-- Patient medications
CREATE POLICY "Authenticated users can view patient medications" ON patient_medications
  FOR ALL USING (auth.role() = 'authenticated');

-- Patient mood diary
CREATE POLICY "Authenticated users can view patient mood diary" ON patient_mood_diary
  FOR ALL USING (auth.role() = 'authenticated');

-- Sessions
CREATE POLICY "Authenticated users can view sessions" ON sessions
  FOR ALL USING (auth.role() = 'authenticated');

-- Email notifications
CREATE POLICY "Authenticated users can view email notifications" ON email_notifications
  FOR ALL USING (auth.role() = 'authenticated');

-- System notifications
CREATE POLICY "Authenticated users can view system notifications" ON system_notifications
  FOR ALL USING (auth.role() = 'authenticated');

-- Logs (only for service role)
CREATE POLICY "Service role can access logs" ON logs
  FOR ALL USING (auth.role() = 'service_role');

-- Clinic settings (only for service role)
CREATE POLICY "Service role can access clinic settings" ON clinic_settings
  FOR ALL USING (auth.role() = 'service_role');

-- ===============================================
-- 7. DADOS DEMO (OPCIONAL)
-- ===============================================

-- Inserir usuários demo com senhas hash bcrypt
INSERT INTO users (full_name, email, password_hash, role, phone, is_active, email_verified) VALUES
('Dr. Carlos Administrador', 'admin@clinica.com', '$2b$10$gu6EY/XfFjz26fQgmWFbMOSu5ParazTLMZnvakgNyQwiI8Njg/vre', 'admin', '(11) 99999-9999', true, true),
('Dra. Maria Santos', 'maria.santos@clinica.com', '$2b$10$gu6EY/XfFjz26fQgmWFbMOSu5ParazTLMZnvakgNyQwiI8Njg/vre', 'professional', '(11) 98888-8888', true, true),
('Dr. João Costa', 'joao.costa@clinica.com', '$2b$10$gu6EY/XfFjz26fQgmWFbMOSu5ParazTLMZnvakgNyQwiI8Njg/vre', 'professional', '(11) 97777-7777', true, true),
('Ana Secretária', 'secretaria@clinica.com', '$2b$10$gu6EY/XfFjz26fQgmWFbMOSu5ParazTLMZnvakgNyQwiI8Njg/vre', 'secretary', '(11) 96666-6666', true, true),
('Pedro Paciente', 'pedro.paciente@email.com', '$2b$10$gu6EY/XfFjz26fQgmWFbMOSu5ParazTLMZnvakgNyQwiI8Njg/vre', 'patient', '(11) 95555-5555', true, true),
('Julia Oliveira Santos', 'julia.oliveira@email.com', '$2b$10$gu6EY/XfFjz26fQgmWFbMOSu5ParazTLMZnvakgNyQwiI8Njg/vre', 'patient', '(11) 94444-4444', true, true)
ON CONFLICT (email) DO UPDATE SET
  password_hash = EXCLUDED.password_hash,
  updated_at = NOW();

-- Inserir profissionais demo
INSERT INTO professionals (user_id, crp_number, specialty, consultation_price, is_available) VALUES
((SELECT id FROM users WHERE email = 'maria.santos@clinica.com'), 'CRP 06/12345', 'Psicologia Clínica', 200.00, true),
((SELECT id FROM users WHERE email = 'joao.costa@clinica.com'), 'CRP 06/67890', 'Psicologia Cognitivo-Comportamental', 180.00, true)
ON CONFLICT (user_id) DO UPDATE SET
  consultation_price = EXCLUDED.consultation_price,
  is_available = EXCLUDED.is_available,
  updated_at = NOW();

-- Inserir secretária demo
INSERT INTO secretaries (user_id, department) VALUES
((SELECT id FROM users WHERE email = 'secretaria@clinica.com'), 'Recepção')
ON CONFLICT (user_id) DO UPDATE SET
  department = EXCLUDED.department,
  updated_at = NOW();

-- Inserir pacientes demo
INSERT INTO patients (user_id, date_of_birth, gender, status) VALUES
((SELECT id FROM users WHERE email = 'pedro.paciente@email.com'), '1990-05-15', 'Masculino', 'active'),
((SELECT id FROM users WHERE email = 'julia.oliveira@email.com'), '1985-08-22', 'Feminino', 'active')
ON CONFLICT (user_id) DO UPDATE SET
  status = EXCLUDED.status,
  updated_at = NOW();

-- Inserir alguns diagnósticos demo
INSERT INTO diagnoses (code, description, type) VALUES
('F41.1', 'Transtorno de ansiedade generalizada', 'CID-10'),
('F32.1', 'Episódio depressivo moderado', 'CID-10'),
('F43.1', 'Transtorno de estresse pós-traumático', 'CID-10'),
('F90.0', 'Transtorno de déficit de atenção/hiperatividade', 'CID-10')
ON CONFLICT (code) DO UPDATE SET
  description = EXCLUDED.description,
  updated_at = NOW();

-- Inserir configurações básicas da clínica
INSERT INTO clinic_settings (setting_key, setting_value, description) VALUES
('clinic_name', 'Clínica de Psicologia Bem-Estar', 'Nome da clínica'),
('clinic_phone', '(11) 3333-4444', 'Telefone principal da clínica'),
('clinic_email', 'contato@clinica.com', 'E-mail principal da clínica'),
('clinic_address', 'Rua das Flores, 123 - São Paulo/SP', 'Endereço da clínica'),
('session_duration', '50', 'Duração padrão das sessões em minutos'),
('business_hours', '{"start": "08:00", "end": "18:00", "days": [1,2,3,4,5]}', 'Horário de funcionamento')
ON CONFLICT (setting_key) DO UPDATE SET
  setting_value = EXCLUDED.setting_value,
  updated_at = NOW();

-- ===============================================
-- 8. COMENTÁRIOS FINAIS
-- ===============================================

-- Adicionar comentários às tabelas principais
COMMENT ON TABLE users IS 'Tabela principal de usuários do sistema - sem RLS para autenticação personalizada';
COMMENT ON TABLE patients IS 'Dados específicos dos pacientes';
COMMENT ON TABLE professionals IS 'Dados específicos dos profissionais de saúde';
COMMENT ON TABLE appointments IS 'Agendamentos e consultas';
COMMENT ON TABLE medical_records IS 'Prontuários médicos e evolução dos pacientes';
COMMENT ON TABLE sessions IS 'Registro detalhado das sessões terapêuticas';
COMMENT ON TABLE financial_transactions IS 'Controle financeiro da clínica';

-- Comentários sobre segurança
COMMENT ON FUNCTION update_updated_at_column() IS 'Função com search_path seguro para atualização automática de timestamps';
COMMENT ON FUNCTION create_first_admin() IS 'Função segura para criação do primeiro administrador';

-- ===============================================
-- FIM DO ARQUIVO
-- ===============================================

-- Exibir resumo da instalação
DO $$
BEGIN
    RAISE NOTICE '===============================================';
    RAISE NOTICE 'SISTEMA CLÍNICA - INSTALAÇÃO CONCLUÍDA';
    RAISE NOTICE '===============================================';
    RAISE NOTICE 'Tabelas criadas: %', (SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public');
    RAISE NOTICE 'Índices criados: %', (SELECT count(*) FROM pg_indexes WHERE schemaname = 'public');
    RAISE NOTICE 'Funções criadas: %', (SELECT count(*) FROM information_schema.routines WHERE routine_schema = 'public');
    RAISE NOTICE '===============================================';
    RAISE NOTICE 'Credenciais Demo:';
    RAISE NOTICE 'Admin: admin@clinica.com / password';
    RAISE NOTICE 'Profissional: maria.santos@clinica.com / password'; 
    RAISE NOTICE 'Secretária: secretaria@clinica.com / password';
    RAISE NOTICE 'Paciente: pedro.paciente@email.com / password';
    RAISE NOTICE '===============================================';
    RAISE NOTICE 'Sistema pronto para uso!';
    RAISE NOTICE '===============================================';
END $$;
