'use client';
import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { TarefaPaciente, TaskType } from '@/types';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';

interface TasksManagerProps {
  professionalId: number;
}

export default function TasksManager({ professionalId }: TasksManagerProps) {
  const [tasks, setTasks] = useState<TarefaPaciente[]>([]);
  const [patients, setPatients] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeView, setActiveView] = useState<'list' | 'create'>('list');
  const [filterType, setFilterType] = useState<TaskType | 'all'>('all');
  const [filterStatus, setFilterStatus] = useState<'all' | 'pending' | 'completed'>('all');
  const [selectedPatient, setSelectedPatient] = useState<number | null>(null);

  // Form state
  const [formData, setFormData] = useState({
    patient_id: '',
    title: '',
    description: '',
    due_date: '',
    task_type: 'task' as TaskType
  });

  useEffect(() => {
    fetchTasks();
    fetchPatients();
  }, [professionalId, filterType, filterStatus, selectedPatient]);

  const fetchTasks = async () => {
    setLoading(true);
    try {
      let query = supabase
        .from('patient_tasks')
        .select(`
          *,
          patient:patients!patient_id (
            id,
            user:users!user_id (
              full_name
            )
          )
        `)
        .eq('professional_id', professionalId)
        .order('created_at', { ascending: false });

      if (filterType !== 'all') {
        query = query.eq('task_type', filterType);
      }
      
      if (filterStatus === 'pending') {
        query = query.eq('is_completed', false);
      } else if (filterStatus === 'completed') {
        query = query.eq('is_completed', true);
      }

      if (selectedPatient) {
        query = query.eq('patient_id', selectedPatient);
      }

      const { data, error } = await query;
      
      if (error) throw error;
      setTasks(data || []);
    } catch (error) {
      console.error('Erro ao buscar tarefas:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchPatients = async () => {
    try {
      const { data, error } = await supabase
        .from('patients')
        .select(`
          id,
          user:users!user_id (
            full_name
          )
        `)
        .eq('status', 'active');
      
      if (error) throw error;
      setPatients(data || []);
    } catch (error) {
      console.error('Erro ao buscar pacientes:', error);
    }
  };

  const handleCreateTask = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.patient_id || !formData.title || !formData.description) {
      alert('Preencha todos os campos obrigatórios!');
      return;
    }

    try {
      const { error } = await supabase
        .from('patient_tasks')
        .insert({
          patient_id: parseInt(formData.patient_id),
          professional_id: professionalId,
          title: formData.title,
          description: formData.description,
          due_date: formData.due_date || null,
          task_type: formData.task_type,
          is_completed: false
        });

      if (error) throw error;

      setFormData({
        patient_id: '',
        title: '',
        description: '',
        due_date: '',
        task_type: 'task'
      });

      setActiveView('list');
      fetchTasks();
      alert('Tarefa criada com sucesso!');
    } catch (error) {
      console.error('Erro ao criar tarefa:', error);
      alert('Erro ao criar tarefa. Tente novamente.');
    }
  };

  const handleToggleStatus = async (taskId: number, currentCompleted: boolean) => {
    const newCompleted = !currentCompleted;
    
    try {
      const { error } = await supabase
        .from('patient_tasks')
        .update({ 
          is_completed: newCompleted,
          completed_at: newCompleted ? new Date().toISOString() : null
        })
        .eq('id', taskId);

      if (error) throw error;
      fetchTasks();
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
    }
  };

  const getTypeIcon = (type: TaskType) => {
    switch (type) {
      case 'task': return '📋';
      case 'message': return '💬';
      case 'questionnaire': return '📝';
      case 'scale': return '📊';
      default: return '📋';
    }
  };

  const getTypeLabel = (type: TaskType) => {
    switch (type) {
      case 'task': return 'Tarefa';
      case 'message': return 'Mensagem';
      case 'questionnaire': return 'Questionário';
      case 'scale': return 'Escala';
      default: return 'Tarefa';
    }
  };

  const getStatusColor = (isCompleted: boolean, isOverdue: boolean) => {
    if (isCompleted) return 'bg-green-100 text-green-800';
    if (isOverdue) return 'bg-red-100 text-red-800';
    return 'bg-yellow-100 text-yellow-800';
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'Sem prazo';
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  const isOverdue = (dueDate: string | null, isCompleted: boolean) => {
    if (!dueDate || isCompleted) return false;
    return new Date(dueDate) < new Date();
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h2 className="text-2xl font-bold text-gray-900">Tarefas e Mensagens</h2>
        <div className="flex gap-2">
          <Button
            onClick={() => setActiveView('list')}
            variant={activeView === 'list' ? 'primary' : 'secondary'}
          >
            📋 Lista
          </Button>
          <Button
            onClick={() => setActiveView('create')}
            variant={activeView === 'create' ? 'primary' : 'secondary'}
          >
            ➕ Criar Nova
          </Button>
        </div>
      </div>

      {activeView === 'list' ? (
        <>
          <Card className="p-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Paciente
                </label>
                <select
                  value={selectedPatient || ''}
                  onChange={(e) => setSelectedPatient(e.target.value ? parseInt(e.target.value) : null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Todos os pacientes</option>
                  {patients.map((patient) => (
                    <option key={patient.id} value={patient.id}>
                      {patient.user?.full_name || 'Paciente'}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tipo
                </label>
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value as TaskType | 'all')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">Todos os tipos</option>
                  <option value="task">Tarefas</option>
                  <option value="message">Mensagens</option>
                  <option value="questionnaire">Questionários</option>
                  <option value="scale">Escalas</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Status
                </label>
                <select
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value as 'all' | 'pending' | 'completed')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">Todos os status</option>
                  <option value="pending">Pendentes</option>
                  <option value="completed">Concluídas</option>
                </select>
              </div>

              <div className="flex items-end">
                <Button
                  onClick={fetchTasks}
                  variant="secondary"
                  className="w-full"
                >
                  🔄 Atualizar
                </Button>
              </div>
            </div>
          </Card>

          <div className="space-y-4">
            {tasks.length === 0 ? (
              <Card className="p-8 text-center">
                <p className="text-gray-500">Nenhuma tarefa encontrada.</p>
              </Card>
            ) : (
              tasks.map((task) => {
                const overdue = isOverdue(task.due_date, task.is_completed);
                const statusColor = getStatusColor(task.is_completed, overdue);
                
                return (
                  <Card key={task.id} className="p-4 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="text-xl">{getTypeIcon(task.task_type)}</span>
                          <span className="text-sm font-medium text-gray-600">
                            {getTypeLabel(task.task_type)}
                          </span>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColor}`}>
                            {overdue ? 'Atrasada' : task.is_completed ? 'Concluída' : 'Pendente'}
                          </span>
                        </div>
                        
                        <h3 className="font-medium text-gray-900 mb-2">
                          {(task as any).patient?.user?.full_name || 'Paciente'} - {task.title}
                        </h3>
                        
                        <p className="text-gray-700 mb-3">
                          {task.description}
                        </p>
                        
                        <div className="flex items-center gap-4 text-sm text-gray-500">
                          <span>📅 Prazo: {formatDate(task.due_date || null)}</span>
                          <span>📅 Criado: {formatDate(task.created_at || null)}</span>
                          {task.completed_at && (
                            <span>✅ Concluído: {formatDate(task.completed_at || null)}</span>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex gap-2 ml-4">
                        {task.task_type !== 'message' && (
                          <Button
                            onClick={() => handleToggleStatus(task.id, task.is_completed)}
                            variant={!task.is_completed ? 'primary' : 'secondary'}
                            size="sm"
                          >
                            {!task.is_completed ? '✅ Marcar Concluída' : '🔄 Marcar Pendente'}
                          </Button>
                        )}
                      </div>
                    </div>
                  </Card>
                );
              })
            )}
          </div>
        </>
      ) : (
        <Card className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Criar Nova Tarefa/Mensagem
          </h3>
          
          <form onSubmit={handleCreateTask} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Paciente *
                </label>
                <select
                  value={formData.patient_id}
                  onChange={(e) => setFormData({ ...formData, patient_id: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="">Selecione um paciente</option>
                  {patients.map((patient) => (
                    <option key={patient.id} value={patient.id}>
                      {patient.user?.full_name || 'Paciente'}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tipo *
                </label>
                <select
                  value={formData.task_type}
                  onChange={(e) => setFormData({ ...formData, task_type: e.target.value as TaskType })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="task">📋 Tarefa</option>
                  <option value="message">💬 Mensagem</option>
                  <option value="questionnaire">📝 Questionário</option>
                  <option value="scale">📊 Escala</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Título *
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="Digite um título..."
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Descrição/Conteúdo *
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder={
                  formData.task_type === 'message' 
                    ? 'Digite sua mensagem...' 
                    : 'Descreva a tarefa...'
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={4}
                required
              />
            </div>

            {formData.task_type !== 'message' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Data de Entrega
                </label>
                <input
                  type="date"
                  value={formData.due_date}
                  onChange={(e) => setFormData({ ...formData, due_date: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  min={new Date().toISOString().split('T')[0]}
                />
              </div>
            )}

            <div className="flex gap-3 pt-4">
              <Button type="submit" variant="primary">
                {formData.task_type === 'message' ? '📨 Enviar Mensagem' : '✅ Criar Tarefa'}
              </Button>
              <Button
                type="button"
                variant="secondary"
                onClick={() => setActiveView('list')}
              >
                Cancelar
              </Button>
            </div>
          </form>
        </Card>
      )}
    </div>
  );
} 